"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema E2ETest:
    r"""
    E2ETest defines the schema for the E2ETest custom resource used for e2e
    testing of Crossplane configurations in controlplanes.

    Attributes
    ----------
    apiVersion : str, default is "meta.dev.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "E2ETest", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MetaDevUpboundIoV1alpha1E2ETestSpec, default is Undefined, required
        spec
    """


    apiVersion: "meta.dev.upbound.io/v1alpha1" = "meta.dev.upbound.io/v1alpha1"

    kind: "E2ETest" = "E2ETest"

    metadata?: v1.ObjectMeta

    spec: MetaDevUpboundIoV1alpha1E2ETestSpec


schema MetaDevUpboundIoV1alpha1E2ETestSpec:
    r"""
    E2ETestSpec defines the specification for e2e testing of Crossplane
    configurations. It orchestrates the complete test lifecycle including setting
    up controlplane, applying test resources in the correct order (InitResources
    → Configuration → ExtraResources → Manifests), validating conditions, and
    handling cleanup. This spec allows you to define e2e tests that verify your
    Crossplane compositions, providers, and managed resources work correctly
    together in a real controlplane environment.

    Attributes
    ----------
    crossplane : MetaDevUpboundIoV1alpha1E2ETestSpecCrossplane, default is Undefined, required
        crossplane
    defaultConditions : [str], default is Undefined, optional
        DefaultConditions specifies the expected conditions that should be met
        after the manifests are applied. These are validation checks that verify
        the resources are functioning correctly. Each condition is a string
        expression that will be evaluated against the deployed resources. Common
        conditions include checking resource status for readiness
    extraResources : [any], default is Undefined, optional
        ExtraResources specifies additional Kubernetes resources that should be
        created or updated after the configuration has been successfully applied.
        These resources may depend on the primary configuration being in place.
        Common use cases include ConfigMaps, Secrets, providerConfigs. Each
        resource must be a valid Kubernetes object.
    initResources : [any], default is Undefined, optional
        InitResources specifies Kubernetes resources that must be created or
        updated before the configuration is applied. These are typically
        prerequisite resources that the configuration depends on. Common use
        cases include ImageConfigs, DeploymentRuntimeConfigs, or any foundational
        resources required for the configuration to work. Each resource must be a
        valid Kubernetes object.
    manifests : [any], default is Undefined, required
        Manifests contains the Kubernetes resources that will be applied as part
        of this e2e test. These are the primary resources being tested - they
        will be created in the controlplane and then validated against the
        conditions specified in DefaultConditions. Each manifest must be a valid
        Kubernetes object. At least one manifest is required. Examples include
        Claims, Composite Resources or any Kubernetes resource you want to test.
    skipDelete : bool, default is Undefined, optional
        If true, skip resource deletion after test
    timeoutSeconds : int, default is Undefined, optional
        TimeoutSeconds defines the maximum duration in seconds that the test is
        allowed to run before being marked as failed. This includes time for
        resource creation, condition checks, and any reconciliation processes. If
        not specified, a default timeout will be used. Consider setting higher
        values for tests involving complex resources or those requiring multiple
        reconciliation cycles.
    """


    crossplane: MetaDevUpboundIoV1alpha1E2ETestSpecCrossplane

    defaultConditions?: [str]

    extraResources?: [any]

    initResources?: [any]

    manifests: [any]

    skipDelete?: bool

    timeoutSeconds?: int


    check:
        len(defaultConditions) >= 1 if defaultConditions
        len(manifests) >= 1
        timeoutSeconds >= 1 if timeoutSeconds not in [None, Undefined]


schema MetaDevUpboundIoV1alpha1E2ETestSpecCrossplane:
    r"""
    Crossplane specifies the Crossplane configuration and settings required
    for this test. This includes the version of Universal Crossplane to
    install, and optional auto-upgrade settings. The configuration defined
    here will be used to set up the controlplane before applying the test
    manifests.

    Attributes
    ----------
    autoUpgrade : MetaDevUpboundIoV1alpha1E2ETestSpecCrossplaneAutoUpgrade, default is Undefined, optional
        auto upgrade
    state : str, default is "Running", optional
        State defines the state for crossplane and provider workloads. We support
        the following states where 'Running' is the default:
        - Running: Starts/Scales up all crossplane and provider workloads in the ControlPlane
        - Paused: Pauses/Scales down all crossplane and provider workloads in the ControlPlane
    version : str, default is Undefined, optional
        Version is the version of Universal Crossplane to install.
    """


    autoUpgrade?: MetaDevUpboundIoV1alpha1E2ETestSpecCrossplaneAutoUpgrade

    state?: "Running" | "Paused" = "Running"

    version?: str


schema MetaDevUpboundIoV1alpha1E2ETestSpecCrossplaneAutoUpgrade:
    r"""
    AutoUpgrades defines the auto upgrade configuration for Crossplane.

    Attributes
    ----------
    channel : str, default is "Stable", optional
        Channel defines the upgrade channels for Crossplane. We support the following channels where 'Stable' is the
        default:
        - None: disables auto-upgrades and keeps the control plane at its current version of Crossplane.
        - Patch: automatically upgrades the control plane to the latest supported patch version when it
          becomes available while keeping the minor version the same.
        - Stable: automatically upgrades the control plane to the latest supported patch release on minor
          version N-1, where N is the latest supported minor version.
        - Rapid: automatically upgrades the cluster to the latest supported patch release on the latest
          supported minor version.
    """


    channel?: "None" | "Patch" | "Stable" | "Rapid" = "Stable"


