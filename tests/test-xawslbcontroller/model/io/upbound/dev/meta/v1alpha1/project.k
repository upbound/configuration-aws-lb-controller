"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Project:
    r"""
    Project defines an Upbound Project, which can be built into a Crossplane
    Configuration.

    Attributes
    ----------
    apiVersion : str, default is "meta.dev.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Project", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MetaDevUpboundIoV1alpha1ProjectSpec, default is Undefined, optional
        spec
    """


    apiVersion: "meta.dev.upbound.io/v1alpha1" = "meta.dev.upbound.io/v1alpha1"

    kind: "Project" = "Project"

    metadata?: v1.ObjectMeta

    spec?: MetaDevUpboundIoV1alpha1ProjectSpec


schema MetaDevUpboundIoV1alpha1ProjectSpec:
    r"""
    ProjectSpec is the spec for a Project. Since a Project is not a Kubernetes
    resource there is no Status, only Spec.

    Attributes
    ----------
    apiDependencies : [MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0], default is Undefined, optional
        APIDependencies are the API dependencies for this project.
        NOTE: This is an experimental feature and is subject to change.
    architectures : [str], default is Undefined, optional
        architectures
    crossplane : MetaDevUpboundIoV1alpha1ProjectSpecCrossplane, default is Undefined, optional
        crossplane
    dependsOn : [MetaDevUpboundIoV1alpha1ProjectSpecDependsOnItems0], default is Undefined, optional
        depends on
    description : str, default is Undefined, optional
        description
    imageConfig : [MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0], default is Undefined, optional
        image config
    license : str, default is Undefined, optional
        license
    maintainer : str, default is Undefined, optional
        maintainer
    paths : MetaDevUpboundIoV1alpha1ProjectSpecPaths, default is Undefined, optional
        paths
    readme : str, default is Undefined, optional
        readme
    repository : str, default is Undefined, required
        repository
    source : str, default is Undefined, optional
        source
    """


    apiDependencies?: [MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0]

    architectures?: [str]

    crossplane?: MetaDevUpboundIoV1alpha1ProjectSpecCrossplane

    dependsOn?: [MetaDevUpboundIoV1alpha1ProjectSpecDependsOnItems0]

    description?: str

    imageConfig?: [MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0]

    license?: str

    maintainer?: str

    paths?: MetaDevUpboundIoV1alpha1ProjectSpecPaths

    readme?: str

    repository: str

    source?: str


schema MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0:
    r"""
    APIDependencies defines a reference to an external API dependency.
    NOTE: This is an experimental feature and is subject to change.

    Attributes
    ----------
    git : MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0Git, default is Undefined, optional
        git
    http : MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0HTTP, default is Undefined, optional
        http
    k8s : MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0K8s, default is Undefined, optional
        k8s
    $type : str, default is Undefined, required
        Type defines the type of API dependency.
    """


    git?: MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0Git

    http?: MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0HTTP

    k8s?: MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0K8s

    $type: "k8s" | "crd"


schema MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0Git:
    r"""
    Git defines the git repository source for the API dependency.

    Attributes
    ----------
    path : str, default is Undefined, optional
        Path is the path within the repository to the API definition.
    ref : str, default is Undefined, optional
        Ref is the git reference (branch, tag, or commit SHA).
    repository : str, default is Undefined, required
        Repository is the git repository URL.
    """


    path?: str

    ref?: str

    repository: str


schema MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0HTTP:
    r"""
    HTTP defines the HTTP source for the API dependency.

    Attributes
    ----------
    url : str, default is Undefined, required
        URL is the HTTP/HTTPS URL to fetch the API dependency from.
    """


    url: str


schema MetaDevUpboundIoV1alpha1ProjectSpecAPIDependenciesItems0K8s:
    r"""
    K8s defines the Kubernetes API version for the dependency.

    Attributes
    ----------
    version : str, default is Undefined, required
        Version is the Kubernetes API version (e.g., "v1.33.0").
    """


    version: str


schema MetaDevUpboundIoV1alpha1ProjectSpecCrossplane:
    r"""
    CrossplaneConstraints specifies a packages compatibility with Crossplane versions.

    Attributes
    ----------
    version : str, default is Undefined, required
        Semantic version constraints of Crossplane that package is compatible with.
    """


    version: str


schema MetaDevUpboundIoV1alpha1ProjectSpecDependsOnItems0:
    r"""
    Dependency is a dependency on another package. A dependency can be of an
    arbitrary API version and kind, but Crossplane expects package dependencies
    to behave like a Crossplane package. Specifically it expects to be able to
    create the dependency and set its spec.package field to a package OCI
    reference.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion of the dependency.
    configuration : str, default is Undefined, optional
        Configuration is the name of a Configuration package image.
        Must be a fully qualified image name, including the registry,
        Deprecated: Specify an apiVersion, kind, and package instead.
    function : str, default is Undefined, optional
        Function is the name of a Function package image.
        Must be a fully qualified image name, including the registry,
        Deprecated: Specify an apiVersion, kind, and package instead.
    kind : str, default is Undefined, optional
        Kind of the dependency.
    package : str, default is Undefined, optional
        Package OCI reference of the dependency. Only used when apiVersion and
        kind are set.
        Musth be a fully qualified image name, including the registry,
        repository, and tag. For example, "registry.example.com/repo/package:tag".
    provider : str, default is Undefined, optional
        Provider is the name of a Provider package image.
        Must be a fully qualified image name, including the registry,
        Deprecated: Specify an apiVersion and kind instead.
    version : str, default is Undefined, required
        Version is the semantic version constraints of the dependency image.
    """


    apiVersion?: str

    configuration?: str

    function?: str

    kind?: str

    package?: str

    provider?: str

    version: str


schema MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0:
    r"""
    ImageConfig defines a set of rules for matching and rewriting images.

    Attributes
    ----------
    matchImages : [MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0MatchImagesItems0], default is Undefined, required
        MatchImages is a list of image matching rules that should be satisfied.
    rewriteImage : MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0RewriteImage, default is Undefined, required
        rewrite image
    """


    matchImages: [MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0MatchImagesItems0]

    rewriteImage: MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0RewriteImage


schema MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0MatchImagesItems0:
    r"""
    ImageMatch defines a rule for matching image.

    Attributes
    ----------
    prefix : str, default is Undefined, required
        Prefix is the prefix that should be matched.
    $type : str, default is "Prefix", optional
        Type is the type of match.
    """


    prefix: str

    $type?: "Prefix" = "Prefix"


schema MetaDevUpboundIoV1alpha1ProjectSpecImageConfigItems0RewriteImage:
    r"""
    RewriteImage defines how a matched image should be rewritten.

    Attributes
    ----------
    prefix : str, default is Undefined, required
        Prefix is the prefix to use when rewriting the image.
    """


    prefix: str


schema MetaDevUpboundIoV1alpha1ProjectSpecPaths:
    r"""
    ProjectPaths configures the locations of various parts of the project, for
    use at build time.

    Attributes
    ----------
    apis : str, default is Undefined, optional
        APIs is the directory holding the project's apis. If not
        specified, it defaults to `apis/`.
    examples : str, default is Undefined, optional
        Examples is the directory holding the project's examples. If not
        specified, it defaults to `examples/`.
    functions : str, default is Undefined, optional
        Functions is the directory holding the project's functions. If not
        specified, it defaults to `functions/`.
    tests : str, default is Undefined, optional
        Tests is the directory holding the project's tests. If not
        specified, it defaults to `tests/`.
    """


    apis?: str

    examples?: str

    functions?: str

    tests?: str


