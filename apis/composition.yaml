apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xawslbcontrollers.aws.platform.upbound.io
  labels:
    provider: helm
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: aws.platform.upbound.io/v1alpha1
    kind: XAWSLBController
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: irsa
            base:
              apiVersion: aws.platform.upbound.io/v1alpha1
              kind: XIRSA
              spec:
                parameters:
                  serviceAccount:
                    name: aws-load-balancer-controller
                    namespace: kube-system
                  condition: StringEquals
                  # policy from aws setup guide https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/deploy/installation/
                  # source: https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.8.2/docs/install/iam_policy.json
                  policyDocument: |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "iam:CreateServiceLinkedRole"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "StringEquals": {
                                        "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:DescribeAccountAttributes",
                                    "ec2:DescribeAddresses",
                                    "ec2:DescribeAvailabilityZones",
                                    "ec2:DescribeInternetGateways",
                                    "ec2:DescribeVpcs",
                                    "ec2:DescribeVpcPeeringConnections",
                                    "ec2:DescribeSubnets",
                                    "ec2:DescribeSecurityGroups",
                                    "ec2:DescribeInstances",
                                    "ec2:DescribeNetworkInterfaces",
                                    "ec2:DescribeTags",
                                    "ec2:GetCoipPoolUsage",
                                    "ec2:DescribeCoipPools",
                                    "elasticloadbalancing:DescribeLoadBalancers",
                                    "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                    "elasticloadbalancing:DescribeListeners",
                                    "elasticloadbalancing:DescribeListenerCertificates",
                                    "elasticloadbalancing:DescribeSSLPolicies",
                                    "elasticloadbalancing:DescribeRules",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetGroupAttributes",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:DescribeTags",
                                    "elasticloadbalancing:DescribeTrustStores"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "cognito-idp:DescribeUserPoolClient",
                                    "acm:ListCertificates",
                                    "acm:DescribeCertificate",
                                    "iam:ListServerCertificates",
                                    "iam:GetServerCertificate",
                                    "waf-regional:GetWebACL",
                                    "waf-regional:GetWebACLForResource",
                                    "waf-regional:AssociateWebACL",
                                    "waf-regional:DisassociateWebACL",
                                    "wafv2:GetWebACL",
                                    "wafv2:GetWebACLForResource",
                                    "wafv2:AssociateWebACL",
                                    "wafv2:DisassociateWebACL",
                                    "shield:GetSubscriptionState",
                                    "shield:DescribeProtection",
                                    "shield:CreateProtection",
                                    "shield:DeleteProtection"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:RevokeSecurityGroupIngress"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:CreateSecurityGroup"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:CreateTags"
                                ],
                                "Resource": "arn:aws:ec2:*:*:security-group/*",
                                "Condition": {
                                    "StringEquals": {
                                        "ec2:CreateAction": "CreateSecurityGroup"
                                    },
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:CreateTags",
                                    "ec2:DeleteTags"
                                ],
                                "Resource": "arn:aws:ec2:*:*:security-group/*",
                                "Condition": {
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:RevokeSecurityGroupIngress",
                                    "ec2:DeleteSecurityGroup"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "Null": {
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:CreateLoadBalancer",
                                    "elasticloadbalancing:CreateTargetGroup"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:CreateListener",
                                    "elasticloadbalancing:DeleteListener",
                                    "elasticloadbalancing:CreateRule",
                                    "elasticloadbalancing:DeleteRule"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:AddTags",
                                    "elasticloadbalancing:RemoveTags"
                                ],
                                "Resource": [
                                    "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                                ],
                                "Condition": {
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:AddTags",
                                    "elasticloadbalancing:RemoveTags"
                                ],
                                "Resource": [
                                    "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                    "elasticloadbalancing:SetIpAddressType",
                                    "elasticloadbalancing:SetSecurityGroups",
                                    "elasticloadbalancing:SetSubnets",
                                    "elasticloadbalancing:DeleteLoadBalancer",
                                    "elasticloadbalancing:ModifyTargetGroup",
                                    "elasticloadbalancing:ModifyTargetGroupAttributes",
                                    "elasticloadbalancing:DeleteTargetGroup"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "Null": {
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:AddTags"
                                ],
                                "Resource": [
                                    "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                                ],
                                "Condition": {
                                    "StringEquals": {
                                        "elasticloadbalancing:CreateAction": [
                                            "CreateTargetGroup",
                                            "CreateLoadBalancer"
                                        ]
                                    },
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:RegisterTargets",
                                    "elasticloadbalancing:DeregisterTargets"
                                ],
                                "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:SetWebAcl",
                                    "elasticloadbalancing:ModifyListener",
                                    "elasticloadbalancing:AddListenerCertificates",
                                    "elasticloadbalancing:RemoveListenerCertificates",
                                    "elasticloadbalancing:ModifyRule"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
            patches:
              - type: ToCompositeFieldPath
                fromFieldPath: status.roleArn
                policy:
                  fromFieldPath: Required
                toFieldPath: status.roleArn
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.providerConfigName
                toFieldPath: spec.parameters.id
          - name: helmRelease
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              spec:
                forProvider:
                  chart:
                    name: aws-load-balancer-controller
                    repository: https://aws.github.io/eks-charts
                    version: 1.8.3
                  namespace: kube-system
                  values:
                    serviceAccount:
                      name: aws-load-balancer-controller
                    # We will natrually patch the service-account when the role becomes ready
                    # However lb-controller won't restart by itself and will keep using the node-role,
                    # so we patch replicaCount after the role becomes ready
                    replicaCount: 0
                  wait: true
                rollbackLimit: 3
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: metadata.labels
                toFieldPath: metadata.labels
              - type: FromCompositeFieldPath
                fromFieldPath: metadata.annotations
                toFieldPath: metadata.annotations
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.providerConfigName
                toFieldPath: spec.providerConfigRef.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.deletionPolicy
                toFieldPath: spec.deletionPolicy
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.helm.chart.version
                toFieldPath: spec.forProvider.chart.version
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterName
                toFieldPath: spec.forProvider.values.clusterName
              - type: FromCompositeFieldPath
                fromFieldPath: status.roleArn
                toFieldPath: spec.forProvider.values.serviceAccount.annotations["eks.amazonaws.com/role-arn"]
              # patch replicas when iam-role is ready
              - type: FromCompositeFieldPath
                fromFieldPath: status.roleArn
                toFieldPath: spec.forProvider.values.replicaCount
                transforms:
                  - type: match
                    match:
                      patterns:
                        - type: regexp
                          regexp: '.*'
                          result: 2
